# -*- coding: utf-8 -*-
"""Hayes_222_ML_project.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1q8yOsgezpDvMyH3NS8kY4PLjgwT3VChV
"""

import numpy as np;
import os;
import pandas as pd;
import matplotlib.pyplot as plt
import io;
import seaborn as sb;

from google.colab import files
uploaded = files.upload()


# https://www.kaggle.com/andrewmvd/fetal-health-classification

class text_color:
    HEADER = '\033[95m'
    OKBLUE = '\033[94m'
    OKCYAN = '\033[96m'
    OKGREEN = '\033[92m'
    WARNING = '\033[93m' #yellow
    FAIL = '\033[91m'
    ENDC = '\033[0m'
    BOLD = '\033[1m'
    UNDERLINE = '\033[4m'


#https://stackoverflow.com/questions/287871/how-to-print-colored-text-to-the-terminal



#normal baseline FHR for newborns = 110-160 BPM
#average STV between 1.21 and 6.47 bpm
#more hist peaks = more variability = sign of abnormal heart rate

file1 = pd.read_csv('/content/fetal_health.csv')

dup = file1.copy()
dup.drop_duplicates(inplace = True)
repeats = (file1.shape[0] - dup.shape[0])

size = (8,8)
fig, ax = plt.subplots(figsize = size)
plt.title('Count Plot')
plot = sb.countplot(data = file1, x = 'fetal_health', palette = ['r', 'g', 'b'])


print('Total number of repetition in dataset: ', repeats)
print("Repetitions deleted.")

print('\n\n\t' + text_color.UNDERLINE + text_color.BOLD + 'Data Frame' + text_color.ENDC)
babies = dup.copy()
babies

x = babies.drop(['fetal_health'], axis = 1)
y = babies['fetal_health']

points = x.values.astype(int)
for i in range(0, 21):
  z = points[:,i]
  plt.hist(z)
  plt.title(x.columns.values[i])
  plt.show()

import matplotlib.pyplot as plt;
import sklearn;
from sklearn import tree;
from sklearn.tree import DecisionTreeClassifier;
from sklearn.model_selection import train_test_split;
from sklearn import metrics
import graphviz;
from IPython.display import display;
from sklearn.tree import export_graphviz;

#random = np.random.RandomState(0)
#don't need to manually randomize becuase train_test_split randomizes in split

#print(x.shape)
#print(y)

#y_cols = ['healthy, suspect, pathological']
#print(x_cols)
#print(y_cols)

#x_names = data.columns.values
#y_names = 'fetal_health'
#print(feature_names)


print(text_color.UNDERLINE + text_color.BOLD + 'Decision Tree:\n\n' + text_color.ENDC)
my_tree = DecisionTreeClassifier(max_depth = 15, min_samples_split = 75)
x_train,x_test,y_train,y_test = train_test_split(x,y)
fig = my_tree.fit(x_train,y_train)
tree.plot_tree(fig)
#fig1 = tree.plot_tree(my_tree, fontsize = 8)
x_cols = (x_train.columns.values)
y_col = ['healthy', 'suspect', 'pathological']


display(graphviz.Source(export_graphviz(my_tree, feature_names = x_cols, class_names = y_col)))

prediction = my_tree.predict(x_test)
score = metrics.accuracy_score(y_test, prediction)
score *= 100
print("Accuracy:", metrics.accuracy_score(y_test, prediction))
print('Decision Tree is ', score, 'percent accurate.')


from joblib import dump, load 

dump(my_tree, 'fetal_health.pkl')

status = ['N/A', 'healthy', 'suspect', 'pathological']

actual = y_test.values.astype(float)
index1 = y_test.values.astype(int)
index2 = prediction.astype(int)
count1 = 0
count2 = 0

for i in range(1, y_test.shape[0]): #not 0, because it prints 'Series[]' instead of a value
  #ax, fig = plt.subplots()
  #fig.scatter(i, actual[i], c = 'blue' )
  #fig.scatter(i, prediction[i], c = 'pink')
  
  print('Test Result: ', actual[i], '\t', status[index1[i]])
  print('Prediction:  ', prediction[i], '\t', status[index2[i]])
  if(actual[i] == prediction[i]):
    print(text_color.OKGREEN + 'Prediction is correct.' + text_color.ENDC)
    count1 += 1
  else:
    print(text_color.FAIL +'Prediction is incorrect.'+ text_color.ENDC)
    count2 +=1


'''fig.plot([y.min(), y.max()], [y.min(), y.max()], 'k--', lw=4)
fig.set_xlabel('Measured')
fig.set_ylabel('Predicted')
plt.show()'''

total = count1 + count2
print(text_color.OKCYAN , '\nNumber of correct predictions: ' , count1, 'out of ' , total , text_color.ENDC)
print(text_color.OKCYAN, '\nNumber of incorrect predictions: ', count2, 'out of ', total, text_color.ENDC)

import pydotplus

dot_data = tree.export_graphviz(my_tree, out_file=None, feature_names= x_cols, class_names= y_col, filled=True, rounded=True, special_characters=True)
graph = pydotplus.graph_from_dot_data(dot_data)

for node in graph.get_node_list():
    if node.get_attributes().get('label') is None:
        continue
    if 'samples = ' in node.get_attributes()['label']:
        labels = node.get_attributes()['label'].split('<br/>')
        for i, label in enumerate(labels):
            if label.startswith('samples = '):
                labels[i] = 'samples = 0'
        node.set('label', '<br/>'.join(labels))
        node.set_fillcolor('white')

samples = (x[:1]);
decision_paths = my_tree.decision_path(samples)

for decision_path in decision_paths:
    for n, node_value in enumerate(decision_path.toarray()[0]):
        if node_value == 0:
            continue
        node = graph.get_node(str(n))[0]            
        node.set_fillcolor('green')
        labels = node.get_attributes()['label'].split('<br/>')
        for i, label in enumerate(labels):
            if label.startswith('samples = '):
                labels[i] = 'samples = {}'.format(int(label.split('=')[1]) + 1)

        node.set('label', '<br/>'.join(labels))


filename = 'tree.png'
graph.write_png(filename)

#https://stackoverflow.com/questions/55878247/how-to-display-the-path-of-a-decision-tree-for-test-samples

